# Generated by Django 3.0.2 on 2020-01-06 14:21

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='InviteCode',
            fields=[
                ('code', models.CharField(max_length=64, primary_key=True, serialize=False, unique=True, verbose_name='邀请码')),
                ('mark', models.CharField(max_length=150, verbose_name='邀请码备注')),
                ('username', models.CharField(db_index=True, max_length=150, verbose_name='邀请人用户名')),
                ('is_used', models.BooleanField(default=False, verbose_name='是否已使用')),
                ('is_free', models.BooleanField(default=False, verbose_name='是否是免费账号')),
                ('user_level', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(64)], verbose_name='新用户等级')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='创建时间')),
                ('expired_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, verbose_name='过期时间')),
            ],
            options={
                'verbose_name_plural': '邀请码',
            },
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('node_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='节点UUID')),
                ('name', models.CharField(max_length=32, verbose_name='节点名称')),
                ('server', models.CharField(max_length=128, verbose_name='服务器地址')),
                ('port', models.IntegerField(default=443, verbose_name='端口')),
                ('protocol', models.CharField(choices=[('ws', 'ws'), ('http', 'http')], default='ws', max_length=32, verbose_name='协议')),
                ('path', models.CharField(max_length=128, verbose_name='ws或http2路径')),
                ('inbound_tag', models.CharField(default='proxy', max_length=64, verbose_name='标签')),
                ('grpc_host', models.CharField(default='127.0.0.1', max_length=64, verbose_name='Grpc地址')),
                ('grpc_port', models.CharField(default='8080', max_length=64, verbose_name='Grpc端口')),
                ('info', models.CharField(max_length=512, verbose_name='节点说明')),
                ('country', models.CharField(default='US', max_length=8, verbose_name='国家')),
                ('used_traffic', models.BigIntegerField(default=0, verbose_name='已用流量')),
                ('total_traffic', models.BigIntegerField(default=0, verbose_name='总流量')),
                ('enable', models.BooleanField(default=True, verbose_name='是否开启')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='创建时间')),
            ],
            options={
                'verbose_name_plural': '服务器节点',
            },
        ),
        migrations.CreateModel(
            name='UserTraffic',
            fields=[
                ('user_id', models.UUIDField(editable=False, primary_key=True, serialize=False, verbose_name='用户UUID')),
                ('year_month', models.CharField(db_index=True, max_length=64, verbose_name='年月记录')),
                ('upload_traffic', models.BigIntegerField(default=0, verbose_name='上传流量')),
                ('download_traffic', models.BigIntegerField(default=0, verbose_name='下载流量')),
            ],
            options={
                'verbose_name_plural': '用户流量',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='用户UUID')),
                ('level', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(64)], verbose_name='用户等级')),
                ('alter_id', models.IntegerField(default=8, verbose_name='额外ID数')),
                ('is_free', models.BooleanField(default=False, verbose_name='是否免费用户')),
                ('expire_at', models.DateTimeField(default=django.utils.timezone.now, null=True, verbose_name='账号过期时间')),
                ('inviter_name', models.CharField(max_length=150, null=True, verbose_name='邀请人用户名')),
                ('invite_code_num', models.PositiveIntegerField(default=5, verbose_name='可生成的邀请码数量')),
                ('total_traffic', models.BigIntegerField(default=0, verbose_name='每月总流量(GB)')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': '用户',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
